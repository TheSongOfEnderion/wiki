var pageName="",idList=[],root,projectId="",projectPath="";function startPage(){const app=Vue.createApp({data:()=>({meta:{},dir:{},headerNavBtn:{},areaToggle:getSpoilerStorageValue(),projectTitle:"",projectSubtitle:"",editorData:{},pageData:{},pageTitle:"",pageContents:{spoiler:[],nonspoiler:[]},isElectron:!1,isNewPage:!1,rerenderData:{},pageHistory:[],urlpaths:[],parentlists:[],templateList:[]}),methods:{isElectronCheck(){console.log(navigator.userAgentData);if(-1==navigator.userAgent.toLowerCase().indexOf(" electron/"))return console.log("Not on electron"),void(this.isElectron=!1);this.isElectron=!0},areaToggleHandler(e){this.areaToggle=e},clearVars(){this.editorData={},this.pageData={},this.pageTitle="",this.pageContents={spoiler:[],nonspoiler:[]}},getPageUrl(){if(!window.location.search)return"home";let e=new URLSearchParams(window.location.search).get("p").replace(/\s/g,"-");return e&&e.trim(),e},cloneObj:e=>JSON.parse(JSON.stringify(e)),capitalize:e=>e.charAt(0).toUpperCase()+e.slice(1),updateProject(){this.isElectron&&window.api.send("toMain",{name:"project:update",id:this.meta.id,projectPath:projectPath})},setPageAsTemplate(){this.dir.hasOwnProperty(pageName)?window.api.send("toMain",{name:"project:setastemplate",id:projectId,urlName:pageName,urlPath:this.dir[pageName].path,projectPath:projectPath}):console.log("Can't turn non-existent page into a template")},async historyPrevious(){1!==this.pageHistory.length&&(await this.readPage(this.pageHistory[this.pageHistory.length-2]),this.pageHistory=this.pageHistory.slice(0,this.pageHistory.length-2))},async gotoPage(e){await this.readPage(e)},async deletePage(){this.isElectron&&"home"!==pageName&&(delete this.dir[pageName],await window.api.send("toMain",{name:"project:deletepage",data:{pageName:pageName,projectPath:projectPath}}),await this.readPage("home"),document.getElementById("sidebar").classList.add("hide"),this.parentlists=Object.keys(this.dir),await window.api.send("toMain",{name:"project:getcontentdirs",id:projectId,projectPath:projectPath}),notify("success","Deleted Successfully","File is moved to trash folder."))},async deletePageConfirm(){this.isElectron&&("home"!==pageName?this.dir.hasOwnProperty(pageName)?sendToMain("dialog:alert","response:delete",{swalOptions:{title:"Are you sure you want to delete this page?",text:"You can still find it in the trash folder if you changed your mind",icon:"warning",showCancelButton:!0}}):console.log("Cannot Delete nonexistent page"):sendToMain("dialog:alert",null,{swalOptions:{title:"Home Page cannot be deleted",text:"This is the most important page of your project.",icon:"warning",showCancelButton:!1}}))},async newPage(e){pageName="new-page",window.history.replaceState(null,null,"?p=new-page"),this.clearVars(),""==e?await this.renderPage("pageNull","assets/new-page.html",!0):await this.renderPage("pageNull",`assets/templates/${e}.html`,!0),document.getElementById("sidebar").classList.add("hide")},async saveContent(e){if(!this.isElectron)return;"home"===pageName&"home"!==e.pageData.urlName&&(e.pageData.urlName="home");let t=e.pageData.urlPath.slice().trim();"/"!=t.charAt(t.length-1)&&(t+="/");let a=t.slice()+pageName.replace(/\s/g,"-")+".html";t+=e.pageData.urlName.replace(/\s/g,"-")+".html",await window.api.send("toMain",{name:"project:save",id:this.meta.id,projectPath:projectPath,info:{pagePath:t,originalPath:a,originalName:pageName.replace(/\s/g,"-"),isNewPage:this.isNewPage},contentData:e.contentData,pageData:this.cloneObj(e.pageData),profileData:this.cloneObj(e.profileData)}),"new-page"!==pageName&&this.dir.hasOwnProperty(pageName)&&pageName!==e.pageData.urlName&&delete this.dir[pageName],this.dir[e.pageData.urlName]={title:e.pageData.title,path:t,parent:e.pageData.parent},this.parentlists=Object.keys(this.dir),await window.api.send("toMain",{name:"project:getcontentdirs",id:projectId,projectPath:projectPath}),this.clearVars(),await this.$nextTick(),this.rerenderData=e,pageName=e.pageData.urlName},async rerenderPage(){await this.renderPage("rerender",this.rerenderData),this.rerenderData={}},async readPage(e){if("home"!==(pageName=e.replace(/\s/g,"-").trim())?window.history.replaceState(null,null,`?p=${pageName}`):window.history.replaceState(null,null,window.location.pathname),this.clearVars(),this.dir.hasOwnProperty(pageName))await this.renderPage("normal",this.dir[pageName].path);else try{await this.renderPage("pageNull","assets/page-not-found.html")}catch(e){console.log(e)}},async fetchHTML(e){let t=await fetch(e);if(400===t.status)return null;let a=await t.text();return a.replace(/&gt;/gm,">"),a},async renderPage(e,t,a=!1){this.headerNavBtn=this.meta.headerNavigation,this.projectTitle=this.meta.projectTitle,this.projectSubtitle=this.meta.projectSubtitle,this.areaToggle=getSpoilerStorageValue();let i="";var n;switch(document.getElementById("projectTitle").innerText=this.projectTitle,e){case"normal":try{if(null==(n=await this.fetchHTML(t)))return void await this.renderPage("pageNull","assets/page-not-found.html")}catch(e){return void await this.renderPage("pageNull","assets/page-not-found.html")}i=n.trim().split("\x3c!-- File Content --\x3e"),loadScripts(i[0]),this.isNewPage=!1;break;case"pageNull":i=(n=(await this.fetchHTML(t)).replace("[[pageName]]",pageName)).trim().split("\x3c!-- File Content --\x3e"),loadScripts(i[0]),window.pageData.title=this.capitalize(pageName.replace(/\-/g," ")).trim(),window.pageData.urlName=pageName.trim().toLowerCase().replace(/\s/g,"-"),a&&(window.pageData.urlName+="-"+makeid(5)),this.isNewPage=!0;break;case"rerender":window.profileData=t.profileData,window.pageData=t.pageData,this.isNewPage=!1}this.pageData=window.pageData,this.pageTitle=window.pageData.title,this.pageParent=window.pageData.parent;let r={},s={};s=parseHTML("rerender"==e?t.contentData:i[1]);let o=[];const l=["spoiler","nonspoiler"];for(const e of l){let t=s.getElementById(e);if(t)for(let e of t.querySelectorAll(".page-tab")){let t=superTrim(e.innerHTML.replace(/&gt;/gm,">"));r[e.id]=t,o.push(`<div id="${e.id}" class="page-tag">\n`+t+"\n</div>")}}const d=new TextRenderer(this.dir,this.isElectron,this.pageData.createSpoilers);o.forEach(((e,t)=>{let a=getPageData(e),i={};window.profileData.hasOwnProperty(a.data.id)&&(i=window.profileData[a.data.id]),this.pageContents[a.type].push({html:d.renderText(e,a.type),profileBox:i,...a.data})}));let c={pageData:window.pageData,profileData:window.profileData,contentData:JSON.parse(JSON.stringify(this.pageContents))};for(const e in c.contentData)for(const t of c.contentData[e])t.html=r[t.id],delete t.profileBox;this.editorData=c,console.log(this.editorData),0==this.areaToggle&&document.getElementById("nonspoiler").classList.remove("hide"),"rerender"!=e&&this.pageHistory.push(pageName)},createScript(src){fetch(src).then((data=>{data.text().then((r=>{eval(r)}))}))}},async created(){this.isElectronCheck();try{window.api.receive("fromMain",(async e=>{if("projectpath"==e.name){if(""!=projectPath)return;return projectPath=e.value,console.log("Path: ",projectPath),await window.api.send("toMain",{name:"project:getcontentdirs",id:projectId,projectPath:projectPath}),void await window.api.send("toMain",{name:"project:gettemplates",id:projectId,projectPath:projectPath})}if("done-saving"==e.name)return console.log("Rerendering"),void await this.rerenderPage();"urlpaths"!=e.name?"templateList"!=e.name?"response:delete"!=e.name||1==e.value&&await this.deletePage():this.templateList=e.value:this.urlpaths=e.value}))}catch(e){}},async mounted(){const e=await fetch(".eternal/eternal.json");this.meta=await e.json();const t=await fetch(".eternal/directory.json");this.dir=await t.json(),projectId=this.meta.id,this.parentlists=Object.keys(this.dir),pageName=this.getPageUrl(),await this.readPage(pageName),this.isElectron&&await window.api.send("toMain",{name:"project:getpath",id:this.meta.id})}});app.component(btn.name,btn),app.component(btntoggle.name,btntoggle),app.component(header.name,header),app.component(pageContent.name,pageContent),app.component(tab.name,tab),app.component(toggle.name,toggle),app.component(breadcrumbs.name,breadcrumbs),app.component(profilebox.name,profilebox),app.component(tabs.name,tabs),app.component(editor.name,editor),app.component(sideBar.name,sideBar),app.component(metaEditor.name,metaEditor),app.component(tabEditor.name,tabEditor),app.component(contentEditor.name,contentEditor),app.component(profileEditor.name,profileEditor),app.component(textInput.name,textInput),app.component(selectDrop.name,selectDrop),app.component(dropdown.name,dropdown),root=app.mount("#app")}function sendToMain(e,t,a){window.api.send("toMain",{name:e,id:projectId,projectPath:projectPath,responseName:t,...a})}function notify(e,t,a){window.createNotification({closeOnClick:!0,displayCloseButton:!1,positionClass:"nfc-top-right",onclick:!1,showDuration:2500,theme:e})({title:t,message:a})}function getPageData(e){const t=e.match(/<div id=\"(.+?)\"/)[1];return{type:window.pageData.tabs[t].area,data:{id:t,pageid:t+"-page",name:window.pageData.tabs[t].name}}}function getSpoilerStorageValue(){return"true"===localStorage.theSongOfEnderion_isSpoiler}function parseHTML(e){let t=document.createElement("template");return t.innerHTML=e,t.content.cloneNode(!0)}function loadScripts(scriptData){let parsedData=parseHTML(scriptData),scripts=parsedData.querySelectorAll("script");for(let script of scripts)script.innerText?eval(script.innerText):script.src&&fetch(script.src).then((data=>{data.text().then((r=>{eval(r)}))})),script.parentNode.removeChild(script)}function superTrim(e){let t=e.trim().split("\n"),a="";for(let e of t)a+=`${e.trim()}\n`;return a}class TextRenderer{constructor(e,t,a){this.headerConvertionTable={"# ":"h1","## ":"h2","### ":"h3","#### ":"h4","##### ":"h5","###### ":"h6"},this.renderTOC=!1,this.dir=e,this.isElectron=t,this.references=[],this.createSpoilers=a}renderText(e,t){e.includes("[[toc]]")&&(this.renderTOC=!0);const a=e.trim().split("\n");let i="";var n={};this.references=[];let r=!1;for(const e of a){let a=e.trim();if(""==a||"[[nl]]"==a){i+="<br>";continue}if(a.includes("◇ ◇ ◇ ◇ ◇")){i+='<span class="center">◇ ◇ ◇ ◇ ◇</span>';continue}if(a.startsWith("* ")&&(a=`• ${a.replace("* ","").trim()}`),a.startsWith("** ")&&(a=`• ${a.replace("** ","").trim()}`,r=!0),a=this.renderWordBold(a),a=this.renderWordItalic(a),a=this.renderLink(a),a.startsWith("> ")){const e=a.split("-"),t=e[0].replace("> ","");let n="";void 0!==e[1]&&(n=`<br><span class="font--small float-end pe-3">- ${e[1]}</span>`),i+=`\n        <div class="center">\n          <span class="quote">\n            <span class="quote-marks font--larger"><b>“</b></span>\n              ${t}\n            <span class="quote-marks"><b>”</b></span>\n            ${n}\n          </span>\n        </div>\n`;continue}const s=a.match(/(#+)\s/);if(s){let e=this.headerConvertionTable[s[0]];if(this.renderTOC){let r=a.replace(s[0],""),o="";o=this.createSpoilers?`${t}-${r.replace(/\s/g,"-").toLowerCase()}`:`${r.replace(/\s/g,"-").toLowerCase()}`,idList.includes(o)&&(o+=makeid(5)),i+=`<${e} id="${o}" class="h">${r}<a href="#" class="arrow-up">↑</a></${e}>\n`,n[r]={id:o,h:e.toUpperCase()}}else i+=`<${e} class="h">${a.replace(s[0],"")}</${e}>\n`;"h1"==e&&(i+="<hr>\n")}else if(""===i)i+=a+"\n";else{if(r){i+='<p class="ms-4 my-0">'+a+"</p>\n",r=!1;continue}i+=a+"<br>\n"}}let s='<p class="font--small"><b>Table of Contents</b></p>';for(const e in n)s+=`\n<a href="#${n[e].id}" class="toc-${n[e].h} btn-primary btn--color-tertiary">${e}</a><br>`;if(0!==this.references.length){s+='\n<a href="#reference" class="toc-H1 btn-primary btn--color-tertiary">Reference</a><br>';let e='<h1 id="reference" class="h">Reference<a href="#" class="arrow-up">↑</a></h1>';for(const t in this.references){const a=this.references[t].name,i=this.references[t].link;console.log(i),e+=`<span id="fnb-${a}">\n        <span>${parseInt(t)+1}. </span> <a class="btn btn-secondary btn--link" href="#fna-${a}")">↑</a>\n        <a class="btn btn-secondary btn--link" onclick="root.gotoPage('${i}')">${a}</a>\n        </span><br>\n        `}i+=e}return i=i.replace("[[toc]]",`<div class="toc">${s}</div>`),this.renderTOC=!1,i}renderLink(e){let t=e.match(/\[\[(.*?)\]\]/g);if(!t)return e;for(const a of t){let t=a.trim();if("[[toc]]"===t)continue;let i=!1;t.startsWith("[[ref:")&&(t=t.replace("ref:",""),t=t.replace(/(\[|\])/g,"").trim(),t="[["+t+"]]",i=!0);let n="",r="";if(t.includes("|")){const e=t.split("|");n=e[0].replace(/(\[|\])/g,"").toLowerCase().trim(),r=e[1].replace(/(\[|\])/g,"").trim()}else n=t.replace(/(\[|\])/g,"").trim();let s=n.toLowerCase().replace(/\s/g,"-");if(this.dir.hasOwnProperty(s)){let t=this.dir[s].title;""!==r&&(t=r),e=this.addLink(e,a,i,t,s);continue}let o=n.toLowerCase();for(const t in this.dir){let n=this.dir[t];if(n.title.toLowerCase()!==o);else{let t=n.title;""!==r&&(t=r),e=this.addLink(e,a,i,t,s)}}let l="";l=""==r?t.replace(/\]/g,"").replace(/\[/g,"").trim():r,e=this.addLink(e,a,i,l,s,!0)}return e}addLink(e,t,a,i,n,r=!1){return a?(this.references.push({name:i,link:n}),e=e.replace(t,`<a class="btn btn-secondary btn--link" href="#fnb-${i}" id="fna-${i}"><sup>[${this.references.length}]</sup></a>`)):this.isElectron?e=r?e.replace(t,`<a class="btn btn-secondary btn--link red" onclick="root.gotoPage('${n}')">${i}</a>`):e.replace(t,`<a class="btn btn-secondary btn--link" onclick="root.gotoPage('${n}')">${i}</a>`):(console.log(`${window.location.origin}?p=${n}`),e=r?e.replace(t,`<a class="btn btn-secondary btn--link red" href='${window.location.origin}?p=${n}'">${i}</a>`):e.replace(t,`<a class="btn btn-secondary btn--link" href='${window.location.origin}?p=${n}'">${i}</a>`)),e}renderWordBold(e){const t=e.match(/\*\*(.*?)\*\*/g),a=e.match(/\_\_(.*?)\_\_/g);if(t)for(const a of t)e=e.replace(a,`<b>${a.replace(/\*/g,"").trim()}</b>`);if(a)for(const t of a)e=e.replace(t,`<b>${t.replace(/\_/g,"").trim()}</b>`);return e}renderWordItalic(e){const t=e.match(/\*(.*?)\*/g);if(t)for(const a of t)"**"!=a&&(e=e.replace(a,`<i>${a.replace(/\*/g,"").trim()}</i>`));const a=e.match(/\_(.*?)\_/g);if(a)for(const t of a)"**"!=t&&(e=e.replace(t,`<i>${t.replace(/\_/g,"").trim()}</i>`));return e}}function makeid(e){let t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",a=t.length;for(;;){let i="";for(let n=0;n<e;n++)i+=t.charAt(Math.floor(Math.random()*a));if(!idList.includes(i))return idList.push(i),i}}const breadcrumbs={name:"breadcrumbs",data:()=>({breadcrumbs:[],show:!1}),emits:["read-page"],components:["btn"],props:{parent:{type:String,default:null},pageTitle:{type:String,default:null},dir:{type:Object,default:{}}},methods:{updateCrumbs(){this.breadcrumbs=[];let e=this.parent,t=!1;for(;t=!1,null!=e;){for(let a in this.dir)if(a==e){e=""!=this.dir[a].parent?this.dir[a].parent:null,this.breadcrumbs.unshift({title:"  »  ",path:null,type:"arrow"}),this.breadcrumbs.unshift({title:this.dir[a].title,urlName:a,type:"link"}),t=!0;break}if(!t)break}this.show=!0,0!==this.breadcrumbs.length&&this.breadcrumbs.push({title:this.pageTitle,urlName:null,type:"arrow"})}},watch:{parent:{immediate:!0,handler(e){null!=this.parent&&0!==Object.keys(this.dir).length&&this.updateCrumbs()}}},template:'\n      <div class="page-breadcrumbs" v-if="this.breadcrumbs.length !== 0">\n        <template v-for="crumb in breadcrumbs">\n          <btn v-if="crumb.type == \'link\'" class="m-0" @btn-click="$emit(\'read-page\', crumb.urlName)" :text="crumb.title"/>\n          <button v-if="crumb.type === \'arrow\'" class="btn m-0 clear">{{ crumb.title }}</button>\n        </template>\n      </div>  \n    '},btn={name:"btn",emits:["btn-click"],props:{text:{type:String,default:"Button Text"},btnId:{type:String}},template:"<button type='button' @click=\"$emit('btn-click')\" :id=\"btnId\" :class=\"['btn', 'btn-primary', 'btn--color-primary']\">{{ text }}</button>"},btntoggle={name:"btnToggle",data:()=>({isToggledVal:!1}),emits:["toggle-click"],props:{text:{type:String,default:"Button Text"},btnId:{type:String},isToggled:{type:Boolean,default:!1}},watch:{isToggled:{immediate:!0,handler(e){this.isToggledVal=e}}},methods:{onClick(){this.isToggledVal=!this.isToggledVal,this.$emit("toggle-click",this.isToggledVal)}},template:"\n      <button type='button'\n        @click=\"onClick()\" \n        :id=\"btnId\" \n        :class=\"['btn', 'btn-primary', 'btn--color-primary', isToggledVal === true ? 'btn--active2' : '']\">\n        {{ text }}\n      </button>"},dropdown={name:"dropdown",emits:["update:modelValue","template-change"],props:{id:{type:String,required:!0},name:{type:String,default:""},placeHolder:{type:String,default:""},modelValue:{type:String,default:""},autocompleteData:{type:Object,default:["test 1","test 2"]}},computed:{value:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}},template:'\n      <div>\n        <select :name="name" :id="id" v-model="value" class="dropdown-select dropdown-select--visual">\n          <option value="" selected>No Selected Template</option>\n          <option v-for="value in autocompleteData" :value="value">{{\'- \' + value }}</option>\n        </select>\n      </div>\n  \n    '},contentEditor={name:"content-editor",emits:["editor-changed","send-data"],components:["btn"],data:()=>({tempContentData:"",selectedTabId:{},selectedContent:"",spoilerSelectedTab:"",nonspoilerSelectedTab:"",createSpoilers:!1}),props:{editorData:{type:Object,required:!0,default:{}},orderFromParent:{type:String}},watch:{orderFromParent:{immediate:!0,handler(e){if(""!==e)switch(e){case"sendData":return void this.$emit("send-data",this.tempContentData);case"refresh":for(const e of this.editorData.contentData[this.selectedTabId.area])if(e.id==this.selectedTabId.id){this.md.value(e.html);break}return this.tempContentData=JSON.parse(JSON.stringify(this.editorData.contentData)),void(this.createSpoilers=this.editorData.pageData.createSpoilers);case"createSpoilersFalse":return this.openArea("nonspoiler"),void(this.createSpoilers=!1);case"createSpoilersTrue":return void(this.createSpoilers=!0)}}},editorData:{immediate:!0,handler(e){if(0===Object.keys(e).length)return;const t=this.editorData.contentData;this.selectedContent=t.nonspoiler[0].html,0!=t.spoiler.length&&(this.spoilerSelectedTab=t.spoiler[0].id),0!=t.nonspoiler.length&&(this.nonspoilerSelectedTab=t.nonspoiler[0].id),this.selectedTabId={area:"nonspoiler",id:this.nonspoilerSelectedTab},this.tempContentData=JSON.parse(JSON.stringify(t))}},selectedContent:{immediate:!0,handler(e){e&&this.md.value(this.selectedContent)}}},methods:{selectedTab(e,t){this.selectedTabId={area:e,id:t};for(let a of this.tempContentData[e]){let e=document.getElementById(a.id+"-editor-btn");e&&(a.id!==t?e.classList.remove("btn--active"):(this.selectedContent=a.html,e.classList.add("btn--active")))}switch(e){case"spoiler":return void(this.spoilerSelectedTab=t);case"nonspoiler":return void(this.nonspoilerSelectedTab=t)}},openArea(e){let t=document.getElementById("nonspoiler-editor-area-btn"),a=document.getElementById("spoiler-editor-area-btn"),i=document.getElementById("spoiler-editor"),n=document.getElementById("nonspoiler-editor");switch(e){case"spoiler":return this.selectedTab("spoiler",this.spoilerSelectedTab),i.classList.remove("hide"),n.classList.add("hide"),t.classList.remove("btn--active2"),void a.classList.add("btn--active2");case"nonspoiler":return this.selectedTab("nonspoiler",this.nonspoilerSelectedTab),i.classList.add("hide"),n.classList.remove("hide"),t.classList.add("btn--active2"),void a.classList.remove("btn--active2")}},generateMDEditor(e){this.md=new EasyMDE({element:e,initialValue:"",autofocus:!0,hideIcons:["guide","side-by-side","preview"],forceSync:!0}),this.md.value(""),this.md.codemirror.on("change",(()=>{for(const e of this.tempContentData[this.selectedTabId.area])if(e.id==this.selectedTabId.id)return void(e.html=this.md.value())}))}},mounted(){let e=document.getElementById("content-textarea-editor");this.generateMDEditor(e)},template:'\n  \n      <div>\n        <btn @btn-click="openArea(\'nonspoiler\')" text="Non-Spoiler" btn-id="nonspoiler-editor-area-btn" class="btn--active2"/>\n        <btn @btn-click="openArea(\'spoiler\')" text="Spoiler" btn-id="spoiler-editor-area-btn" v-show="createSpoilers == true"/>\n      </div>\n      \x3c!-- v-show="areaName == \'nonspoiler\' || (areaName == \'spoiler\' && createSpoilers == true)" --\x3e\n      <template v-for="(area, areaName, areaIndex) in editorData.contentData">\n        \x3c!-- Areas --\x3e\n        <div :id="areaName + \'-editor\'" :class="[ areaName !== \'nonspoiler\' ? \'hide\' : \'\']">\n  \n          \x3c!-- Buttons --\x3e\n            <button v-for="(content, contentIndex) in area" @click="selectedTab(areaName, content.id)" :id="content.id + \'-editor-btn\'"  \n              :class="[\'btn\', \'btn-primary\', \'btn--color-secondary\', \'btn--color-tab\', \'font--smaller\', contentIndex == 0 ? \'btn--active\' : \'\' ]"> \n              {{ content.name }}\n            </button>\n  \n        </div>\n  \n      </template>\n  \n      \x3c!-- Page Contents --\x3e\n      <div id="content-markdown-editor">\n        <textarea id="content-textarea-editor"></textarea>\n      </div>\n  \n      '},editor={name:"editor",data:()=>({selectedTabId:"",tempProfileData:{},tempContentData:{},tempPageData:{},tempCreateSpoilers:!1,isEditorChanged:!1,sendToChild:"",spoilertoggletext:"Spoilers Enabled",editorData:{},editorDataBackup:{}}),props:{passedEditorData:{type:Object,required:!0},urlpaths:{type:Array,default:[]},parentsList:{type:Array,default:[]},templateList:{type:Array,default:[]},isNewPage:{type:Boolean,default:!1},dir:{type:Object,required:!0}},emits:["save-content","delete-page","update-project","new-page","history-previous","set-page-as-template"],components:["markdown","btn","content-editor","profile-editor","meta-editor","tab-editor","select-drop","btnToggle","sidebar"],watch:{passedEditorData:{immediate:!0,async handler(e){0!==Object.keys(e).length&&(this.editorData=e,this.editorDataBackup=JSON.parse(JSON.stringify(e)),this.tempCreateSpoilers=this.editorData.pageData.createSpoilers,await this.$nextTick(),await this.toggleSpoiler(this.tempCreateSpoilers))}}},methods:{toggleEditorView(){document.getElementById("page-content").classList.toggle("hide"),document.getElementById("editor").classList.toggle("hide")},toggleSideBar(){document.getElementById("sidebar").classList.toggle("hide")},openEditorTab(e){const t=["content-editor","manage-tab","profile-box","scripts-tab"];for(let a of t)a!==e?document.getElementById(a).classList.add("hide"):document.getElementById(e).classList.remove("hide")},editorChanged(){this.isEditorChanged||(this.isEditorChanged=!0)},async saveEditor(){if(this.sendToChild="sendData",await this.$nextTick(),this.sendToChild="",this.tempPageData.urlPath.toLowerCase().includes(".html"))return void this.$emit("send-data",null);if(!0===this.isNewPage&&this.dir.hasOwnProperty(this.tempPageData.urlName))return void console.log("Page Name already exists!");let e="";for(const t in this.tempContentData){e+=`<div id="${t}">\n`;for(const a of this.tempContentData[t])e+=`<div id="${a.id}" class="page-tab">\n${a.html.trim()}\n</div>\n`;e+="</div>\n"}this.tempPageData.createSpoilers=this.tempCreateSpoilers,this.tempPageData.tabs=this.editorData.pageData.tabs,this.$emit("save-content",{contentData:e,profileData:this.tempProfileData,pageData:this.tempPageData})},async closeEditor(){this.editorData=JSON.parse(JSON.stringify(this.editorDataBackup)),await this.toggleSpoiler(this.editorData.pageData.createSpoilers),this.sendToChild="refresh",await this.$nextTick(),this.sendToChild=""},async toggleSpoiler(e){this.spoilertoggletext=!1===e?"Spoilers Disabled":"Spoilers Enabled",this.tempCreateSpoilers=e,this.sendToChild=!1===e?"createSpoilersFalse":"createSpoilersTrue",await this.$nextTick(),this.sendToChild=""},async tempChangeEditorData(e){const t=[];this.editorData.pageData.tabs=JSON.parse(JSON.stringify(e.tabs));for(const e in this.editorData.contentData)for(let a of this.editorData.contentData[e])t.push(a.id);for(const t in this.editorData.contentData)for(let a of this.editorData.contentData[t]){if(!e.deletedTabs.includes(a.id))continue;const i=this.editorData.contentData[t].indexOf(a);this.editorData.contentData[t].splice(i,1)}for(const a in e.tabs){if(t.includes(a))continue;const i=e.tabs[a].area;if(e.tabs[a].hasOwnProperty("originalId")){let t=e.tabs[a].originalId;for(const i in this.editorData.contentData)for(const n of this.editorData.contentData[i])n.id==t&&(n.id=a,n.name=e.tabs[a].name,n.pageid=a+"-page")}else{let t={html:" ",id:a,name:e.tabs[a].name,pageid:a+"-page"};this.editorData.contentData[i].push(t)}}this.sendToChild="refresh",await this.$nextTick(),this.sendToChild=""},newPage(e){this.$emit("new-page",e)}},computed:{getSpoilerStorageValue(){if(0!==Object.keys(this.editorData).length)return this.tempCreateSpoilers}},template:'\n      <sidebar @delete-page="$emit(\'delete-page\')" @update-project="$emit(\'update-project\')" @new-page="newPage" @set-page-as-template="$emit(\'set-page-as-template\')" :template-list="templateList"/> \n  \n      <div class="d-flex flex-column btn-div">\n        <btn class="font--medium btn-side" text="≡" @btn-click="toggleSideBar"/>\n        <btn class="font--medium btn-side" text="⚙" @btn-click="toggleEditorView"/>\n        <btn class="font--medium btn-side" text="🡄" @btn-click="$emit(\'history-previous\')"/>\n      </div>\n  \n      <div id="editor" class="container hide">\n        <div id="editor-menu" class="row card card--visual mt-1 mb-4">\n          <h1 class="font--25 mb-2 ps-1">Editor</h1>\n  \n          <div class="container px-0 pb-3">\n            <div class="row">\n              <meta-editor :editor-data="editorData" :urlpaths="urlpaths" :parents-list=\'parentsList\' @editor-changed="editorChanged" :order-from-parent="sendToChild" @send-data="(data) => tempPageData = data"/>\n            </div>\n  \n            <div class="row mt-2 ">\n              <div class="col">\n                <div class="d-flex justify-content-start">\n                  <btn class="font--small" text="Edit Contents" @btn-click="openEditorTab(\'content-editor\')"/>\n                  <btn class="font--small" text="Manage Tabs" @btn-click="openEditorTab(\'manage-tab\')"/>\n                  <btn class="font--small" text="Profile Box" @btn-click="openEditorTab(\'profile-box\')"/>\n                  \x3c!-- <btn class="font--small" text="Script" @btn-click="openEditorTab(\'scripts-tab\')"/> --\x3e\n                  <btnToggle class="font--small" :text="spoilertoggletext" @toggle-click="toggleSpoiler" :isToggled="getSpoilerStorageValue"/>\n                  \n                </div>\n              </div>\n  \n              <div class="col">\n                <div class="d-flex justify-content-end">\n                  <btn class="font--small" text="Save" @btn-click="saveEditor" />\n                  <btn class="font--small" text="Reset" @btn-click="closeEditor"/>\n                </div>\n              </div>\n            </div>\n  \n          </div>\n        </div>\n  \n        <div class="row card card--visual card--editor mb-5">\n  \n          \x3c!-- Content Editor --\x3e\n          <div id="content-editor" class="">\n            <h1 class="page-title d-flex justify-content-between" v-cloak>Content Editor</h1>\n            <content-editor :editor-data="editorData" @editor-changed="editorChanged" :order-from-parent="sendToChild" @send-data="(data) => tempContentData = data"/>\n          </div>\n  \n          \x3c!-- Manage Tab Editor --\x3e\n          <div id="manage-tab" class="hide">\n            <h1 class="page-title d-flex justify-content-between" v-cloak>Manage Tab</h1>\n            <tab-editor :editor-data="editorData" @editor-changed="editorChanged" :order-from-parent="sendToChild" @changed-select="tempChangeEditorData"/>\n          </div>\n  \n          \x3c!-- Profile Editor --\x3e\n          <div id="profile-box" class="hide">\n            <h1 class="page-title d-flex justify-content-between" v-cloak>Profile Box</h1>\n            <profile-editor :editor-data="editorData"  @editor-changed="editorChanged" :order-from-parent="sendToChild" @send-data="(data) => tempProfileData = data"/>\n          </div>\n  \n          <div id="scripts-tab" class="hide">\n            <h1 class="page-title d-flex justify-content-between" v-cloak>Scripts</h1>\n          </div>\n  \n        </div>\n      </div>'},metaEditor={name:"meta-editor",data:()=>({titleVal:"",parentVal:"",tagsVal:"",urlName:"",urlPath:"",descVal:"",tempPageData:{}}),emits:["editor-changed","send-data"],props:{editorData:{type:Object,required:!0},urlpaths:{type:Array,default:[]},parentsList:{type:Array,default:[]},orderFromParent:{type:String}},components:["textinput"],watch:{editorData:{immediate:!0,handler(e){0!==Object.keys(e).length&&(this.tempPageData=JSON.parse(JSON.stringify(this.editorData.pageData)),this.titleVal=this.editorData.pageData.title,this.urlName=this.editorData.pageData.urlName,this.urlPath=this.editorData.pageData.urlPath,this.parentVal=this.editorData.pageData.parent,this.tagsVal=this.editorData.pageData.tags,this.descVal=this.editorData.pageData.description,"/"!=this.urlPath.charAt(this.urlPath.length-1)&&(this.urlPath+="/"))}},orderFromParent:{immediate:!0,handler(e){if(e)switch(e){case"sendData":return this.tempPageData.title=this.titleVal.trim(),this.tempPageData.parent=this.parentVal.trim().toLowerCase(),this.tempPageData.tags=this.tagsVal.trim().toLowerCase(),this.tempPageData.urlPath=this.urlPath.trim().toLowerCase(),this.tempPageData.urlName=this.urlName.trim().toLowerCase(),this.tempPageData.description=this.descVal.trim(),void this.$emit("send-data",this.tempPageData);case"refresh":return this.titleVal=this.tempPageData.title,this.parentVal=this.tempPageData.parent,this.tagsVal=this.tempPageData.tags,this.urlPath=this.tempPageData.urlPath,this.urlName=this.tempPageData.urlName,void(this.descVal=this.tempPageData.description)}}}},template:'\n      <table class="editor-table me-5">\n        <tbody>\n          <tr class="input-text input-text--visual">\n            <textinput id="pageTitle" name="Page Title" place-holder="Awesome page title!" v-model="titleVal" @editor-changed="$emit(\'editor-changed\')"/> </tr>\n          <tr class="input-text input-text--visual">\n            <textinput id="pageTitle" name="Url Name" place-holder="page file name" v-model="urlName" @editor-changed="$emit(\'editor-changed\')"/> </tr>\n          <tr class="input-text input-text--visual">\n            <textinput id="pageTitle" name="Path" place-holder="page file name" v-model="urlPath" @editor-changed="$emit(\'editor-changed\')" :autocomplete-data="urlpaths"/> </tr>\n          <tr class="input-text input-text--visual">\n            <textinput id="pageParent" name="Parent" place-holder="Parent page for breadcrumbs" v-model="parentVal" @editor-changed="$emit(\'editor-changed\')" :autocomplete-data="parentsList"/> </tr>\n          <tr class="input-text input-text--visual">\n            <textinput id="Tags" name="Tags" place-holder="TagA TagB TagC" v-model="tagsVal" @editor-changed="$emit(\'editor-changed\')"/> </tr>\n            <tr class="input-text input-text--visual">\n            <textinput id="Tags" name="Description" place-holder="Page Description" v-model="descVal" @editor-changed="$emit(\'editor-changed\')"/> </tr>\n        </tbody>\n      </table>'},profileEditor={name:"profile-editor",data:()=>({profileData:{},tempProfileData:{},selectedTabId:"",selectDropData:{},createSpoilers:!1}),emits:["editor-changed","send-data"],props:{editorData:{type:Object,required:!0,default:{}},orderFromParent:{type:String}},watch:{orderFromParent:{immediate:!0,handler(e){if(e)switch(e){case"sendData":return void this.$emit("send-data",this.tempProfileData);case"refresh":return this.profileData=this.editorData.profileData,this.generateSelectDropData(),this.tempProfileData=JSON.parse(JSON.stringify(this.profileData)),this.changeProfileBox(this.selectedTabId),void(this.createSpoilers=this.editorData.pageData.createSpoilers);case"createSpoilersFalse":return void(this.createSpoilers=!1);case"createSpoilersTrue":return void(this.createSpoilers=!0)}}},editorData:{immediate:!0,handler(e){if(0===Object.keys(e).length)return;this.profileData=this.editorData.profileData;let t=Object.keys(this.profileData);0!==t.length&&(this.selectedTabId=t[0]),this.generateSelectDropData(),this.tempProfileData=JSON.parse(JSON.stringify(this.profileData)),this.changeProfileBox(this.selectedTabId)}}},methods:{generateSelectDropData(){this.selectDropData={};for(const e in this.editorData.contentData)for(const t of this.editorData.contentData[e])this.selectDropData[t.id]={name:t.name,data:this.editorData.profileData[t.id],type:e}},changeProfileBox(e){if(""===e)return;this.selectedTabId=e;const t=this.tempProfileData[e];void 0!==t?this.jsonEditor.set(t):this.jsonEditor.set({})},tempSaveProfile(){let e={};try{e=this.jsonEditor.get()}catch(e){return void console.log("Not Proper JSON")}this.$emit("editor-changed"),this.tempProfileData[this.selectedTabId]=e}},mounted(){const e=document.getElementById("jsoneditor-div"),t={mode:"code",onChange:this.tempSaveProfile};this.jsonEditor=new JSONEditor(e,t)},template:'\n      <select-drop :data="selectDropData" @changed-select="changeProfileBox" :createSpoilers="createSpoilers"/>\n      <div id="jsoneditor-div" style="height: 500px;"></div>\n      '},tabEditor={name:"tab-editor",data:()=>({createSpoilers:!1,tabName:"",selectedTabId:"",selectData:{},deletedTab:[]}),emits:["editor-changed","send-data","changedSelect"],props:{editorData:{type:Object,required:!0},orderFromParent:{type:String}},watch:{editorData:{immediate:!0,handler(e){0!==Object.keys(e).length&&(this.generateSelectData(),this.createSpoilers=this.editorData.pageData.createSpoilers)}},orderFromParent:{immediate:!0,handler(e){if(""!==e)switch(e){case"refresh":return void this.generateSelectData();case"createSpoilersFalse":return this.createSpoilers=!1,void(this.tabName="");case"createSpoilersTrue":return this.createSpoilers=!0,void(this.tabName="")}}}},methods:{generateSelectData(){this.selectData={},this.deletedTab=[];for(const e in this.editorData.contentData)for(const t of this.editorData.contentData[e])this.selectData[t.id]={name:t.name,area:e}},onChange(e){this.tabName=this.selectData[e.target.value].name,this.selectedTabId=e.target.value},tabClear(){this.tabName="",this.selectedTabId="",this.sendData()},tabRename(){if(""===this.selectedTabId)return;const e=this.selectData[this.selectedTabId].area,t=e+"-"+this.tabName.replace(/\s/g,"-").trim().toLowerCase();delete this.selectData[this.selectedTabId],this.selectData[t]={name:this.tabName,area:e,originalId:this.selectedTabId},this.selectedTabId=t,this.sendData()},tabAdd(e){if(""===this.tabName)return;const t=e+"-"+this.tabName.replace(/\s/g,"-").trim().toLowerCase();this.selectData.hasOwnProperty(t)||(this.selectData[t]={name:this.tabName,area:e},this.sendData())},tabDelete(){""!==this.selectedTabId&&this.selectData.hasOwnProperty(this.selectedTabId)&&(delete this.selectData[this.selectedTabId],this.deletedTab.push(this.selectedTabId),this.selectedTabId="",this.tabName="",this.sendData())},sendData(){this.$emit("changedSelect",{tabs:this.selectData,deletedTabs:this.deletedTab})}},template:'\n    <div class="container m-0 p-0">\n      <div class="row">\n  \n        <div class="col-3">\n          <select class="width-100" name="Tabs" size="11" id="managetab-contentarea-list" @change="onChange($event)">\n            <optgroup id="editorTabGroupNonSpoiler" label="Non-Spoiler">\n              <template v-for="(value, id, index) in selectData">\n                <option v-if="value.area === \'nonspoiler\'" :value="id" >{{ value.name }}</option>\n              </template>\n            </optgroup>\n              \n            <optgroup id="editorTabGroupSpoiler"  label="Spoiler" v-show="createSpoilers == true">\n              <template v-for="(value, id, index) in selectData">\n                <option v-if="value.area === \'spoiler\'" :value="id" >{{ value.name }}</option>\n              </template>\n            </optgroup>\n          </select>\n        </div>\n  \n        <div class="col-9">\n  \n          <table class="editor-table me-5 width-100">\n            <tbody>\n              <tr class="input-text input-text--visual">\n                <p class="m-0 text-left">Tab Name:</p>\n                <textinput id="tabName" place-holder="Place a name here" v-model="tabName" @editor-changed="$emit(\'editor-changed\')"/> </tr>\n              <tr class="ps-5">\n                <btn class="font--small" text="Rename" @btn-click="tabRename"/>\n                <btn class="font--small" text="Delete" @btn-click="tabDelete"/>\n                <btn class="font--small" text="Clear" @btn-click="tabClear"/>\n                <btn class="font--small" text="Add (Non-Spoilers)" @btn-click="tabAdd(\'nonspoiler\')"/>\n                <btn class="font--small" text="Add (Spoilers)" @btn-click="tabAdd(\'spoiler\')" v-show="createSpoilers == true"/>\n  \n              </tr>\n                \n            </tbody>\n          </table>\n    \n        \n        </div>\n  \n      </div>\n    </div>\n  \n    '},textInput={name:"textinput",emits:["editor-changed","update:modelValue"],props:{id:{type:String,required:!0},name:{type:String,default:""},placeHolder:{type:String,default:""},modelValue:{type:String,default:""},autocompleteData:{type:Array,default:[]}},computed:{value:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e),this.$emit("editor-changed")}}},template:'\n      <td class="textinput-label" ><label :for="id" v-if="name !== \'\'"> {{ name }}: </label></td>\n      <td class="textinput-input" >\n        <input v-if="autocompleteData.length == 0" type="text" :id="id" :name="name" class="outline-primary" :placeHolder="placeHolder" v-model="value" />\n        <input v-else type="text" :id="id" :list="id + \'-list\'" :name="name" class="outline-primary" :placeHolder="placeHolder" v-model="value" />\n        <template>\n          <datalist v-if="autocompleteData.length !== 0" :id="id + \'-list\'">\n            <option v-for="value in autocompleteData">{{value}}</option>\n          </datalist>\n        </template>\n      </td>\n    '},header={name:"header-card",data:()=>({buttons:""}),props:{title:String,subtitle:String,btnList:Object},emits:["read-page"],components:["btn"],computed:{getNavBtns(){return this.btnList?Object.keys(this.btnList):[]}},template:'\n      <div class="center">\n        <h1 class="project-title mx-0 mt-6 mb-1">{{ title }}</h1>\n        <h2 class="project-subtitle mx-0 mt-2 mb-5">{{ subtitle }}</h2>\n  \n          <div class="d-flex flex-wrap justify-content-center btns-header">\n            <div class="dropdown" v-for="(value, name) in btnList">\n              <btn :text="name" class="btn--header font--medium" @btn-click="$emit(\'read-page\', value._default)"/>\n              <div v-if="Object.keys(value).length > 1" class="dropdown-content">\n                <template v-for="(item, name) in value">\n                  <btn v-if="name !== \'_default\'" :text="name" class="font--small btn--header btn-nav" @btn-click="$emit(\'read-page\', item)"/>\n                </template>\n              </div>\n            </div>\n          </div>\n      </div>'},pageContent={name:"page-content",data:()=>({tabList:{spoiler:[],nonspoiler:[]}}),emits:["read-page"],props:{pageContents:{type:Object,default:{nonspoiler:[],spoiler:[]},required:!0},pageData:{type:Object,default:{}},dir:{type:Object,default:{}},areaToggle:{type:Boolean,default:!1}},components:["tab","breadcrumbs"],methods:{selectedTab(e,t){for(let a of this.pageContents[e]){let e=document.getElementById(a.pageid),i=document.getElementById(a.pageid.replace("-page","-btn"));a.pageid!==t?(e.classList.add("hide"),i.classList.remove("btn--active")):(e.classList.remove("hide"),i.classList.add("btn--active"))}},openArea(e){switch(!1===this.pageData.createSpoilers&&(e=!1),e){case!0:return document.getElementById("spoiler").classList.remove("hide"),void document.getElementById("nonspoiler").classList.add("hide");case!1:return document.getElementById("spoiler").classList.add("hide"),void document.getElementById("nonspoiler").classList.remove("hide")}},readPage(e){this.$emit("read-page",e)}},watch:{areaToggle:{handler(e){this.openArea(e)}}},mounted(){this.openArea(getSpoilerStorageValue())},template:'\n      <div v-cloak>\n        \n        <breadcrumbs :parent="pageData.parent" :page-title="pageData.title" :dir="dir" @read-page="readPage"/>\n        \n        <div id="nonspoiler" :class="[\'content-area\', pageData.createSpoilers === false ? \'\' : \'hide\']" v-cloak>\n  \n          \x3c!-- Create Non-Spoiler Buttons --\x3e\n          <div class="page-tab-btns"  v-show="pageContents.nonspoiler.length > 1">\n              <button v-for="(html, index) in pageContents.nonspoiler" :id="html.id + \'-btn\'" :class="[\'btn\', \'btn-primary\', \'btn--color-tertiary\', \'btn--color-tab\', index == 0 ? \'btn--active\' : \'\']" @click="selectedTab(\'nonspoiler\', html.pageid)">{{ html.name }}</button>\n          </div>\n          \x3c!-- Create Non-Spoiler Content Area --\x3e\n          <tab v-for="(html, index) in pageContents.nonspoiler" :html="html.html" :id="html.pageid" :profile-data="html.profileBox" :class="{hide: index != 0}"/>\n  \n        </div>\n  \n  \n        <div id="spoiler" class="content-area" v-show="pageData.createSpoilers === true" v-cloak> \n  \n          \x3c!-- Create Spoiler Buttons --\x3e\n          <div class="page-tab-btns" v-show="pageContents.spoiler.length > 1">\n              <button v-for="(html, index) in pageContents.spoiler" :id="html.id + \'-btn\'" :class="[\'btn\', \'btn-primary\', \'btn--color-tertiary\', \'btn--color-tab\', index == 0 ? \'btn--active\' : \'\']" @click="selectedTab(\'spoiler\', html.pageid)">{{ html.name }}</button>\n          </div>\n          \x3c!-- Create Spoiler Content Area --\x3e\n          <tab v-for="(html, index) in pageContents.spoiler" :html="html.html" :id="html.pageid" :profile-data="html.profileBox" :class="{hide: index != 0}"/>\n  \n        </div>\n      </div>'},profilebox={name:"profilebox",data:()=>({imageData:{}}),props:{profileData:{type:Object,default:{}}},methods:{selectedTab(e){for(let t in this.imageData){let a=document.getElementById(t),i=document.getElementById(t+"-btn");t!==e?(a.classList.add("hide"),i.classList.remove("btn--active")):(a.classList.remove("hide"),i.classList.add("btn--active"))}}},watch:{profileData:{immediate:!0,handler(e){if(0!==Object.keys(e)){this.imageData={};for(const t in e.Image)this.imageData[t.trim().replace(/\s/,"-").toLowerCase()+"-"+makeid(8)]={name:t,path:e.Image[t]}}}}},template:'\n      <div class="profile-box profile-box--visual float-end">\n        <div class="profile-title"> {{ profileData.Title }}</div>\n  \n        <div class="profile-image" v-if="Object.keys(imageData).length !== 0">\n          <template v-for="(value, name, index) in imageData">\n              <button @click="selectedTab(name)" :id="name + \'-btn\'" \n                :class="[\'btn\', \'btn-primary\', \'btn--color-tertiary\', \'btn--color-tab\', \'font--smaller\', index == 0 ? \'btn--active\' : \'\' ]"> \n                {{ value.name }}\n              </button>\n          </template>\n  \n          <template v-for="(value, name, index) in imageData">\n              <img :src="value.path" :alt="value.name" :id="name" :class="[\'profile-image\', index != 0 ? \'hide\' : \'\']" />\n          </template>\n        </div>\n  \n        <table>\n          <tbody>\n  \n            <template v-for="(category, name) in profileData.Content">\n              <tr v-if="name !== \'Desc\'"  class="category"> \n                <td colspan="2">{{name}}</td>\n              </tr>\n              <tr v-for="(value, type) in category">\n                <td class="type"><b> {{ type }} </b></td>\n                <td v-if="!Array.isArray(value)"> {{ value }} </td>\n                <td v-if="Array.isArray(value)"> \n                  <template v-for="itemName in value"> \n                  • {{ itemName }} <br>\n                  </template>  \n                </td>\n              </tr>\n            </template>\n  \n          </tbody>\n        </table>\n      </div>\n    '},selectDrop={name:"select-drop",data:()=>({selectedArea:"Non-Spoiler",tabList:[]}),props:{data:{type:Object,required:!0},createSpoilers:{type:Boolean}},emits:["changedSelect"],methods:{onChange(e){for(const t in this.data)t===e.target.value&&(this.selectedArea="nonspoiler"===this.data[t].type?"Non-Spoiler":"Spoiler");this.$emit("changedSelect",e.target.value)}},watch:{createSpoilers:{immediate:!0,handler(e){if(null==e)return;if(0==Object.keys(this.data).length)return;let t="";for(const e of Object.keys(this.data))if(e.includes("nonspoiler")){t=e;break}let a=document.getElementById("areaTab");a.value=t,a.dispatchEvent(new Event("change"))}}},template:'\n      <label for="areaTab" class="me-1"> {{ selectedArea }} Tab: </label>\n      <select name="areaTab" id="areaTab" @change="onChange($event)"> \n  \n        <optgroup id="editorSelectDropNonSpoiler" label="Non-Spoiler">\n          <template v-for="(value, id, index) in data">\n            <option v-if="value.type === \'nonspoiler\'" :value="id" >{{ value.name }}</option>\n          </template>\n        </optgroup>\n          \n        <optgroup id="editorSelectDropSpoiler"  label="Spoiler" v-show="createSpoilers == true">\n          <template v-for="(value, id, index) in data">\n            <option v-if="value.type === \'spoiler\'" :value="id" >{{ value.name }}</option>\n          </template>\n        </optgroup>\n  \n      </select>\n  \n      '},sideBar={name:"sidebar",emits:["delete-page","hide-page","update-project","new-page","set-page-as-template"],components:["dropdown"],data:()=>({template:""}),props:{templateList:{type:Array,default:[]}},methods:{closeSidebar(){document.getElementById("sidebar").classList.add("hide")},deletePage(){this.$emit("delete-page"),this.closeSidebar()},newPage(){this.$emit("new-page",this.template)}},template:'\n      <div id="sidebar" class=\'sidebar hide\'>\n  \n        <btn class="font--medium float-end" text="✕" @btn-click="closeSidebar"/>\n        <h2 class=\'mb-3\'>Side Menu</h2>\n  \n        <btn class="font--medium btn--color-secondary" text="Update Project" @btn-click="$emit(\'update-project\')"/>\n  \n        <br>\n        <btn class="font--medium btn--color-secondary" text="New Page" @btn-click="newPage"/>\n        <btn class="font--medium btn--color-secondary" text="Delete Page" @btn-click="deletePage"/>\n        <br>\n        <dropdown id="templateInput" place-holder="Template" v-model="template" :autocomplete-data="templateList"/>\n        <br>\n        <btn class="font--medium btn--color-secondary" text="Set page as Template" @btn-click="$emit(\'set-page-as-template\')"/>\n        \x3c!-- <btn class="font--medium btn--color-secondary" text="Hide Page" @btn-click="$emit(\'hide-page\')"/> --\x3e\n        \x3c!-- :autocomplete-data="urlpaths" --\x3e\n        \n      </div>\n    '},tab={name:"tab",props:{html:{type:String,required:!1},id:{type:String,required:!1},profileData:{type:Object,default:{}}},components:["profilebox"],template:'\n      <div :id="id">\n        <profilebox v-if="Object.keys(profileData).length !== 0" :profile-data="profileData"/>\n        <div v-html="html"></div>\n      </div>\n    '},tabs={name:"tabs",props:{html:{type:Object,required:!0}},methods:{selectedTab(e,t){for(let a of this.html[e]){let e=document.getElementById(a.pageid),i=document.getElementById(a.pageid.replace("-page","-btn"));a.pageid!==t?(e.classList.add("hide"),i.classList.remove("btn--active")):(e.classList.remove("hide"),i.classList.add("btn--active"))}}},template:'\n      \x3c!-- Create Spoiler Buttons --\x3e\n      <div class="page-tab-btns">\n        <button v-for="(html, index) in html" :id="html.id + \'-btn\'" :class="[\'btn\', \'btn-primary\', \'btn--color-secondary\', \'btn--color-tab\', index == 0 ? \'btn--active\' : \'\']" @click="selectedTab(\'spoiler\', html.id)">{{ html.name }}</button>\n      </div>\n  \n      \x3c!-- Create Spoiler Content Area --\x3e\n      <tab v-for="(html, index) in html" :html="html.html" :id="html.id" :class="{hide: index != 0}"/>\n  \n    '},toggle={name:"toggle",data:()=>({checkValue:getSpoilerStorageValue(),tooltipText:"Show Spoilers!!"}),watch:{checkValue:{immediate:!0,handler(e){localStorage.theSongOfEnderion_isSpoiler=e,this.tooltipText=e?"Hide Spoilers":"Show Spoilers"}}},template:'\n    <div class="tooltip">\n      <input type="checkbox" aria-label="Toggle" class="toggle toggle-visual float-end" @change="$emit(\'toggled\', checkValue)" v-model="checkValue" v-cloak>\n      <span class="tooltiptext bg-primary" v-html="tooltipText">\n      </span>\n    </div>\n  \n    '};